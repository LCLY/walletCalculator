{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","leverage","walletSize","maxLoss","entryPrice","stopLoss","data","setData","maxMargin","setMaxMargin","maxQuota","setMaxQuota","useEffect","movePerct","unrealizedPNL","Math","abs","className","addonBefore","value","type","placeholder","onChange","e","parseFloat","target","toFixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OA4GeA,MAxGf,WAQC,MAAwBC,mBAAgB,CACvCC,SAAU,GACVC,WAAY,GACZC,QAAS,GACTC,WAAY,GACZC,SAAU,KALX,mBAAOC,EAAP,KAAaC,EAAb,KAQA,EAAkCP,mBAAS,GAA3C,mBAAOQ,EAAP,KAAkBC,EAAlB,KACA,EAAgCT,mBAAS,GAAzC,mBAAOU,EAAP,KAAiBC,EAAjB,KAqBA,OAnBAC,qBAAU,WACT,IAAIC,EAAYP,EAAKF,WAAa,IAI9BU,EAFaC,KAAKC,IAAIV,EAAKF,WAAaE,EAAKD,UACdQ,EACGP,EAAKL,SACvCO,EAAYF,EAAKH,SAAWW,EAAgB,KAE7B,KAAlBR,EAAKL,UACe,KAApBK,EAAKJ,YACY,KAAjBI,EAAKH,SACe,KAApBG,EAAKF,YACa,KAAlBE,EAAKD,WAELI,EAAcD,EAAYF,EAAKJ,WAAc,KAC7CS,EAAYH,MAEX,CAACF,IAGH,qBAAKW,UAAU,MAAf,SACC,sBAAKA,UAAU,uBAAf,UACC,oBAAIA,UAAU,oBAAd,+CACA,gCACC,cAAC,IAAD,CACCA,UAAU,oBACVC,YAAY,WACZC,MAAOb,EAAKL,SACZmB,KAAK,SACLC,YAAY,yBACZC,SAAU,SAACC,GAAD,OACThB,EAAQ,2BAAKD,GAAN,IAAYL,SAAUuB,WAAWD,EAAEE,OAAON,aAGnD,cAAC,IAAD,CACCC,KAAK,SACLH,UAAU,oBACVC,YAAY,cACZG,YAAY,uCACZF,MAAOb,EAAKJ,WACZoB,SAAU,SAACC,GAAD,OACThB,EAAQ,2BAAKD,GAAN,IAAYJ,WAAYsB,WAAWD,EAAEE,OAAON,aAGrD,cAAC,IAAD,CACCC,KAAK,SACLH,UAAU,oBACVC,YAAY,WACZG,YAAY,6DACZF,MAAOb,EAAKH,QACZmB,SAAU,SAACC,GAAD,OACThB,EAAQ,2BAAKD,GAAN,IAAYH,QAASqB,WAAWD,EAAEE,OAAON,aAGlD,cAAC,IAAD,CACCC,KAAK,SACLH,UAAU,oBACVC,YAAY,cACZG,YAAY,2BACZF,MAAOb,EAAKF,WACZkB,SAAU,SAACC,GAAD,OACThB,EAAQ,2BAAKD,GAAN,IAAYF,WAAYoB,WAAWD,EAAEE,OAAON,aAGrD,cAAC,IAAD,CACCC,KAAK,SACLH,UAAU,oBACVC,YAAY,YACZG,YAAY,gCACZF,MAAOb,EAAKD,SACZiB,SAAU,SAACC,GAAD,OACThB,EAAQ,2BAAKD,GAAN,IAAYD,SAAUmB,WAAWD,EAAEE,OAAON,aAGnD,sBAAKF,UAAU,qBAAf,UACC,yCACA,6DAAgCP,EAASgB,QAAQ,GAAjD,OACA,oDAAuBlB,EAAUkB,QAAQ,kBCtFhCC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c28351de.chunk.js","sourcesContent":["import \"./App.scss\";\nimport { useState, useEffect } from \"react\";\nimport { Input, Button } from \"antd\";\n\nfunction App() {\n\tinterface IData {\n\t\tleverage: any;\n\t\twalletSize: any;\n\t\tmaxLoss: any;\n\t\tentryPrice: any;\n\t\tstopLoss: any;\n\t}\n\tconst [data, setData] = useState<IData>({\n\t\tleverage: \"\",\n\t\twalletSize: \"\",\n\t\tmaxLoss: \"\",\n\t\tentryPrice: \"\",\n\t\tstopLoss: \"\",\n\t});\n\n\tconst [maxMargin, setMaxMargin] = useState(0);\n\tconst [maxQuota, setMaxQuota] = useState(0);\n\n\tuseEffect(() => {\n\t\tlet movePerct = data.entryPrice / 100;\n\n\t\tlet difference = Math.abs(data.entryPrice - data.stopLoss);\n\t\tlet differencePerct = difference / movePerct;\n\t\tlet unrealizedPNL = differencePerct * data.leverage; // in percentage e.g. 750%\n\t\tlet maxMargin = data.maxLoss / (unrealizedPNL / 100);\n\t\tif (\n\t\t\tdata.leverage !== \"\" &&\n\t\t\tdata.walletSize !== \"\" &&\n\t\t\tdata.maxLoss !== \"\" &&\n\t\t\tdata.entryPrice !== \"\" &&\n\t\t\tdata.stopLoss !== \"\"\n\t\t) {\n\t\t\tsetMaxMargin((maxMargin * data.walletSize) / 100);\n\t\t\tsetMaxQuota(maxMargin);\n\t\t}\n\t}, [data]);\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<div className='calculator__outerdiv'>\n\t\t\t\t<h1 className='calculator__title'>Wallet Risk Management Calculator</h1>\n\t\t\t\t<div>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tclassName='calculator__input'\n\t\t\t\t\t\taddonBefore='Leverage'\n\t\t\t\t\t\tvalue={data.leverage}\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tplaceholder='Your Leverage e.g. 10x'\n\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\tsetData({ ...data, leverage: parseFloat(e.target.value) })\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<Input\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tclassName='calculator__input'\n\t\t\t\t\t\taddonBefore='Wallet Size'\n\t\t\t\t\t\tplaceholder='Your total wallet size e.g. 100(USD)'\n\t\t\t\t\t\tvalue={data.walletSize}\n\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\tsetData({ ...data, walletSize: parseFloat(e.target.value) })\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<Input\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tclassName='calculator__input'\n\t\t\t\t\t\taddonBefore='Max Loss'\n\t\t\t\t\t\tplaceholder='Maximum loss of the whole wallet you are willing to accept'\n\t\t\t\t\t\tvalue={data.maxLoss}\n\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\tsetData({ ...data, maxLoss: parseFloat(e.target.value) })\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<Input\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tclassName='calculator__input'\n\t\t\t\t\t\taddonBefore='Entry Price'\n\t\t\t\t\t\tplaceholder='Entry price of the asset'\n\t\t\t\t\t\tvalue={data.entryPrice}\n\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\tsetData({ ...data, entryPrice: parseFloat(e.target.value) })\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<Input\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tclassName='calculator__input'\n\t\t\t\t\t\taddonBefore='Stop Loss'\n\t\t\t\t\t\tplaceholder='Stop loss target of the asset'\n\t\t\t\t\t\tvalue={data.stopLoss}\n\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\tsetData({ ...data, stopLoss: parseFloat(e.target.value) })\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className='calculator__result'>\n\t\t\t\t\t\t<h2>Result:</h2>\n\t\t\t\t\t\t<div>Initial Margin Max Quota: {maxQuota.toFixed(2)}%</div>\n\t\t\t\t\t\t<div>Maximum Margin: ${maxMargin.toFixed(2)}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}